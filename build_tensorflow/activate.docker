#!/bin/bash

set -eu -o pipefail

_bsd_="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

#TF_BASE_IMAGE=tensorflow/tensorflow:latest-devel
BASE_IMAGE=ubuntu:16.04

docker images | grep extern-deps &>/dev/null || \
    docker build "${_bsd_}/docker_build_context" \
           -t extern-deps \
           -f -<<'_DEPS_EOF_'
FROM scratch
COPY * /external/
_DEPS_EOF_

docker build "$(mktemp -d)" \
       --build-arg BASE_IMAGE="${BASE_IMAGE}" \
       --build-arg HOST_UID="$(id -u)" \
       --build-arg DOCKER_ARCH=arm64v8 \
       --build-arg OS_TARGET_ARCH=arm64 \
       --build-arg TARGET_ARCH=aarch64 \
       -t cross-gcc-builder \
       -f -<<'_GCC_DOCKERFILE_EOF_'
ARG BASE_IMAGE
ARG TARGET_ARCH
ARG DOCKER_ARCH
FROM ${BASE_IMAGE} AS BAZEL_LAYER

RUN apt-get update && apt-get install -y \
    curl \
    git \
    rsync \
    openjdk-8-jdk-headless

# Install bazel
RUN echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list && \
    curl https://bazel.build/bazel-release.pub.gpg | apt-key add - && \
    apt-get update && \
    apt-get install -y bazel

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc

FROM BAZEL_LAYER AS TF_CROSS_BUILD_ENV_LAYER

# Create users
ARG HOST_UID
ENV CONTAINER_USER_ID=${HOST_UID}
ENV CONTAINER_USER_NAME=tensorflow

RUN useradd --shell /bin/bash \
	-u "${CONTAINER_USER_ID}" -o -c "" \
	-m "${CONTAINER_USER_NAME}"
RUN echo "${CONTAINER_USER_NAME}:${CONTAINER_USER_NAME}" | chpasswd
RUN usermod -aG sudo ${CONTAINER_USER_NAME}
RUN mkdir -p /etc/sudoers.d
RUN echo "${CONTAINER_USER_NAME} ALL=(ALL) NOPASSWD: ALL" \
     > "/etc/sudoers.d/${CONTAINER_USER_NAME}"

ENV USER ${CONTAINER_USER_NAME}
ENV HOME /home/"${CONTAINER_USER_NAME}"
RUN chmod a+w /home/"${CONTAINER_USER_NAME}"
RUN chown "${CONTAINER_USER_NAME}" /home/"${CONTAINER_USER_NAME}"

FROM TF_CROSS_BUILD_ENV_LAYER AS TF_CROSS_BUILD_TOOLCHAIN_LAYER

ARG OS_TARGET_ARCH
ENV OS_TARGET_ARCH=${OS_TARGET_ARCH}

# RUN apt-get install -y --no-install-recommends software-properties-common \
#     && add-apt-repository ppa:team-gcc-arm-embedded/ppa
# RUN apt-get remove --purge -y gcc-arm-none-eabi || true

RUN dpkg --add-architecture arm64 && dpkg --print-foreign-architectures
RUN touch /etc/apt/sources.list.d/arm.list
RUN echo "deb [arch=$OS_TARGET_ARCH] http://ports.ubuntu.com/ xenial main restricted universe multiverse" \
    | tee -a /etc/apt/sources.list.d/arm.list
RUN echo "deb [arch=$OS_TARGET_ARCH] http://ports.ubuntu.com/ xenial-updates main restricted universe multiverse" \
    | tee -a /etc/apt/sources.list.d/arm.list
RUN echo "deb [arch=$OS_TARGET_ARCH] http://ports.ubuntu.com/ xenial-security main restricted universe multiverse" \
    | tee -a /etc/apt/sources.list.d/arm.list
RUN echo "deb [arch=$OS_TARGET_ARCH] http://ports.ubuntu.com/ xenial-backports main restricted universe multiverse" \
    | tee -a /etc/apt/sources.list.d/arm.list
RUN sed -i 's#deb http://archive.ubuntu.com/ubuntu/#deb [arch=amd64] http://archive.ubuntu.com/ubuntu/#g' /etc/apt/sources.list
RUN sed -i 's#deb http://security.ubuntu.com/ubuntu/#deb [arch=amd64] http://security.ubuntu.com/ubuntu/#g' /etc/apt/sources.list

RUN apt-get update && apt-get install -y --no-install-recommends \
    g++ \
    gfortran \
    sudo

RUN apt-get update && apt-get install -y --no-install-recommends \
    python-numpy python-pip python-mock \
    python3-numpy python3-pip python3-mock \
    libpython-dev libpython-all-dev libpython3-dev libpython3-all-dev \
    libpython-all-dev:${OS_TARGET_ARCH} \
    libpython3-all-dev:${OS_TARGET_ARCH} \
    zlib1g-dev:${OS_TARGET_ARCH}

RUN curl -fsSL https://bootstrap.pypa.io/get-pip.py | python3

RUN python3 -m pip install -U --no-cache-dir \
    six \
    wheel \
    mock \
    numpy \
    h5py \
    grpcio

RUN python3 -m pip install -U --no-cache-dir keras_applications==1.0.5 --no-deps
RUN python3 -m pip install -U --no-cache-dir keras_preprocessing==1.0.3 --no-deps

RUN rm -rf /var/lib/apt/lists/*

FROM TF_CROSS_BUILD_TOOLCHAIN_LAYER AS TF_BUILD_BASE_RUNTIME
USER ${CONTAINER_USER_NAME}

_GCC_DOCKERFILE_EOF_

docker build "$(mktemp -d)" \
       --build-arg CUDA_VER="9.2" \
       --build-arg BASE_IMAGE=cross-gcc-builder \
       --build-arg TARGET_ARCH=aarch64 \
       -t cross-cuda-gcc-builder \
       -f -<<'_DOCKERFILE_EOF_'
ARG BASE_IMAGE
FROM ${BASE_IMAGE} AS TF_CROSS_BUILD_CUDA_TOOLCHAIN_LAYER
USER root

# Copy CUDA and DriveWorks tools
ARG CUDA_VER
ENV CUDA_VER=${CUDA_VER}
COPY --from=extern-deps /external /external
RUN ls /external

ARG TARGET_ARCH
ENV TARGET_ARCH=${TARGET_ARCH}

RUN apt-get update \
    && dpkg -i /external/cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64.deb \
    && apt-key add /var/cuda-repo-9-2-local/7fa2af80.pub

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-toolkit-9-2 \
    cuda-cross-${TARGET_ARCH}-9-2

# Install aarch64 external libraries
WORKDIR /tmp_aarch64-linux

RUN find /external \
    -name "TensorRT-*aarch64*.cuda-${CUDA_VER}.cudnn*.tar.gz" \
    -exec \
    tar -zxf {} --strip-components=1 --directory /tmp_aarch64-linux \;

RUN find /external \
    -name "cudnn-${CUDA_VER}-linux-aarch64-v*.tgz" \
    -exec \
    tar -zxf {} --directory /tmp_aarch64-linux \;

WORKDIR /usr/local/cuda-${CUDA_VER}/targets/aarch64-linux
RUN rsync -avz /tmp_aarch64-linux/cuda/include/ include/
RUN rsync -avz /tmp_aarch64-linux/cuda/lib64/ lib/

# Install x86_64 external libraries
WORKDIR /tmp_x86_64-linux

RUN find /external \
    -name "TensorRT-*x86_64*.cuda-${CUDA_VER}.cudnn*.tar.gz" \
    -exec \
    tar -zxf {} --strip-components=1 --directory /tmp_x86_64-linux \;

RUN find /external \
    -name "cudnn-${CUDA_VER}-linux-x64-v*.tgz" \
    -exec tar -xvf {} --directory /tmp_x86_64-linux \;

WORKDIR /usr/local/cuda-${CUDA_VER}/targets/x86_64-linux
RUN rsync -avz /tmp_x86_64-linux/cuda/include/ include/
RUN rsync -avz /tmp_x86_64-linux/cuda/lib64/ lib/

RUN rm -rf /tmp_aarch64-linux /tmp_x86_64-linux
RUN rm -rf /external
RUN rm -rf /var/lib/apt/lists/*

FROM TF_CROSS_BUILD_CUDA_TOOLCHAIN_LAYER AS THIRD_PARTY_DEPS_LAYER
WORKDIR /opt/third_party
RUN chown -R ${USER} /opt/third_party

FROM THIRD_PARTY_DEPS_LAYER AS TF_BUILD_LAYER
USER ${CONTAINER_USER_NAME}

_DOCKERFILE_EOF_

function docker_exec {
    local -r image_type=${1}
    docker run --rm -it \
           --user="$(id -u)" \
           --privileged \
           --ipc=host \
           -v "$(readlink -f ~/pkgs)":/host/pkgs \
           -v ${PWD}:/workspace -w /workspace \
           "${image_type}" \
           /bin/bash
}

#docker_exec cross-gcc-builder
docker_exec cross-cuda-gcc-builder
